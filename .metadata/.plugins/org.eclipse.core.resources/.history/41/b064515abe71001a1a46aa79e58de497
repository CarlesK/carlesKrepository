#include "Personne.h"
#include "Entraineur.h"
#include "Joueur.h"
#include "Annuaire.h"
#include "ContratException.h"
#include "Date.h"
#include "validationFormat.h"
#include <iostream>
#include <string>
#include <ctime>
#include <map>

using namespace hockey;
using namespace util;

using namespace std;
int main()
{
   try
   {

   cout <<"Bienvenue dans l'outil d'ajout d'une personne "<< endl;
   cout <<"............................................."<< endl;

   string p_nomJoueur;
   cout <<"Entrer le nom du Joueur " << endl;
   cin >> p_nomJoueur;

   string p_prenomJoueur;
   cout <<"Entrer le prenom du Joueur " << endl;
   cin >> p_prenomJoueur;


   cin.ignore();//consomme le délimiteur qui est resté

   string p_telephoneJoueur;
   char bufferJoueur[256];

   cout <<" Entrer le numero de telephone du joueur " << endl;
   cin.getline(bufferJoueur, 256);
   p_telephoneJoueur = bufferJoueur;


	while(!util::validerTelephone(p_telephoneJoueur))
	{
		cout <<" Le numéro de téléphone doit avoir un format national canadien" << endl;
		cout <<" Entrer le numero de telephone du joueur " << endl;
		 cin.getline(bufferJoueur, 256);
		 p_telephoneJoueur = bufferJoueur;
	}


   	long p_jourNaissanceJoueur;
   	long p_moisNaissanceJoueur;
   	long p_anneeNaissanceJoueur;

   	cout <<" Veuillez entrer sa date de naissance " << endl;
   	cout <<" Le jour [1...31] ";
   	cin >>  p_jourNaissanceJoueur;

   	cout <<"Le mois [1...12] ";
   	cin >> p_moisNaissanceJoueur;

   	cout <<"L'année [1970...] ";
   	cin >> p_anneeNaissanceJoueur;


    //cin.ignore();//consomme le délimiteur qui est resté

   	Date cDate;

   	Date dateJoueur(p_jourNaissanceJoueur, p_moisNaissanceJoueur, p_anneeNaissanceJoueur);
    bool estJoueurValide;

    estJoueurValide = ((cDate - dateJoueur)/ (Date::estBissextile(cDate.reqAnnee())? 366 : 365)) >=15 && ((cDate - dateJoueur)/ (Date::estBissextile(cDate.reqAnnee())? 366 : 365)) <=17 ;


	while(!Date::validerDate(p_jourNaissanceJoueur,p_moisNaissanceJoueur,p_anneeNaissanceJoueur)||!estJoueurValide)
	{
		cout <<" Date invalide, le joueur doit être agé entre 15 et 17 ans" << endl;
		cout <<" Veuillez entrer sa date de naissance " << endl;

		cout <<" Le jour [1...31] ";
		cin >> p_jourNaissanceJoueur;

		cout <<" Le mois [1...12] ";
		cin >> p_moisNaissanceJoueur;

		cout <<" L'année [1970...] ";
		cin >> p_anneeNaissanceJoueur;
	 }

	 cin.ignore();//consomme le délimiteur qui est resté

	map<string, int> positions;

	positions["ailier"]    =1;
	positions["centre"]    =2;
	positions["defenseur"] =3;
	positions["gardien"]   =4;

	string p_position;
	char bufferPosjoueur[256];
	cout <<" Entrez la position du joueur" << endl;
	cin.getline(bufferPosjoueur, 256);
	p_position = bufferPosjoueur;


	while(positions.find(conversionMinuscule(p_position)) == positions.end())
	{
	     cout <<" La position du joueur est invalide " << endl;
		 cout <<"  Entrez la position du joueur " << endl;
		 cin.getline(bufferPosjoueur, 256);
		 p_position = bufferPosjoueur;
	}


        /*carles */

	  // Personne* unJoueur = new Joueur(p_nomJoueur,p_prenomJoueur,dateJoueur,p_telephoneJoueur,p_position);

		/*Affichage des Informations de l'objet*/

		//cout <<unJoueur->reqPesonneFormatee()<<endl;


	string p_nomEntraineur;
	cout <<" Entrez le nom de l'entraîneur " << endl;
	cin >> p_nomEntraineur;

	string p_prenomEntraineur;
	cout <<"Entrez le prénom de l'entraîneur " << endl;
	cin >> p_prenomEntraineur;

	cin.ignore();//consomme le délimiteur qui est resté

	string p_telephoneEntraineur;
	char bufferEntraineur[256];

	cout <<" Entrez le numero de téléphone de l'entraîneur " << endl;
	cin.getline(bufferEntraineur, 256);
	p_telephoneEntraineur = bufferEntraineur;


    while(!util::validerTelephone(p_telephoneEntraineur))
	{
		cout <<" Le numéro de téléphone doit avoir un format national canadien" << endl;
		cout <<"  Entrez le numero de téléphone de l'entraîneur " << endl;
		cin.getline(bufferEntraineur, 256);
	    p_telephoneEntraineur = bufferEntraineur;
	}


   	long p_jourNaissanceEntraineur;
   	long p_moisNaissanceEntraineur;
   	long p_anneeNaissanceEntraineur;

   	cout <<" Veuillez entrer sa date de naissance " << endl;
   	cout <<" Le jour [1...31] ";
   	cin >>  p_jourNaissanceEntraineur;

   	cout <<"Le mois [1...12] ";
   	cin >> p_moisNaissanceEntraineur;

   	cout <<"L'année [1970...] ";
   	cin >> p_anneeNaissanceEntraineur;


    //cin.ignore();//consomme le délimiteur qui est resté

   	Date dateEntraineur(p_jourNaissanceEntraineur, p_moisNaissanceEntraineur, p_anneeNaissanceEntraineur);
    bool estEntraineurValide;

    estEntraineurValide = ((cDate - dateJoueur)/ (Date::estBissextile(cDate.reqAnnee())? 366 : 365)) >=19;


	while(!Date::validerDate(p_jourNaissanceEntraineur,p_moisNaissanceEntraineur,p_anneeNaissanceEntraineur)||!estEntraineurValide)
	{
		cout <<" La date n'est pas valide ou ne correspond pas à la date de naissance d'une personne majeure" << endl;
		cout <<" Veuillez entrer sa date de naissance " << endl;

		cout <<" Le jour [1...31] ";
		cin >> p_jourNaissanceEntraineur;

		cout <<" Le mois [1...12] ";
		cin >> p_moisNaissanceEntraineur;

		cout <<" L'année [1970...] ";
		cin >> p_anneeNaissanceEntraineur;
	 }



    cin.ignore();//consomme le délimiteur qui est resté

    char p_sexe;
    cout <<"Veuillez entrer le sexe de l'entraineur : (M ou F )" << endl;
    cin >> p_sexe;




























/*

   string p_nom;
   cout <<"Entrer le nom de entraineur " << endl;
   cin >> p_nom;
   cin.ignore();//consomme le délimiteur qui est resté

	string p_prenom;
	cout <<"Entrer le prenom de entraineur " << endl;
	cin >> p_prenom;


	cin.ignore();//consomme le délimiteur qui est resté

	string p_telephone;
	char buffer[256];

    cout <<"Entrer le numero de telephone de entraineur " << endl;
    cin.getline(buffer, 256);
    p_telephone = buffer;

	long p_jourNaissance;
	long p_moisNaissance;
	long p_anneeNaissance;

	cout <<"Veuillez entrer sa date de naissance " << endl;
	cout <<"Le jour [1...31] ";
	cin >>  p_jourNaissance;

	cout <<"Le mois [1...12] ";
	cin >> p_moisNaissance;

	cout <<"L'année [1970...] ";
	cin >> p_anneeNaissance;

	string p_numRAMQ;
    cout <<"Entrer le num RAMQ de entraineur " << endl;
    cin >> p_numRAMQ;

    cin.ignore();//consomme le délimiteur qui est resté

    char p_sexe;
    cout <<"Entrer le sexe de entraineur " << endl;
    cin >> p_sexe;


	//util::Date uneDate(p_jourNaissance, p_moisNaissance, p_anneeNaissance);/* Creation d'un objet Date */


	/*Creation d'un objet Entraineur*/

	//hockey::Entraineur unEntraineur(p_nom,p_prenom,uneDate,p_telephone,p_numRAMQ,p_sexe);

	/*Affichage des Informations de l'objet*/

	//cout <<unEntraineur.reqPesonneFormatee()<< endl;


	/*Creation d'un objet Jouer * /

	cout <<"Bienvenue dans l'outil d'ajout de Joueur "<< endl;
	   cout <<"............................................."<< endl;

	   string p_nom;
	   cout <<"Entrer le nom de Joueur " << endl;
	   cin >> p_nom;
	  // cin.ignore();//consomme le délimiteur qui est resté

		string p_prenom;
		cout <<"Entrer le prenom de Joueur " << endl;
		cin >> p_prenom;


		string p_position;
		cout <<"Entrer la position du jouer " << endl;
		cin >> p_position;


		cin.ignore();//consomme le délimiteur qui est resté

		string p_telephone;
		char buffer[256];

	    cout <<"Entrer le numero de telephone de Joueur " << endl;
	    cin.getline(buffer, 256);
	    p_telephone = buffer;


	    cin.ignore();//consomme le délimiteur qui est resté


		long p_jourNaissance;
		long p_moisNaissance;
		long p_anneeNaissance;

		cout <<"Veuillez entrer sa date de naissance " << endl;
		cout <<"Le jour [1...31] ";
		cin >>  p_jourNaissance;

		cout <<"Le mois [1...12] ";
		cin >> p_moisNaissance;

		cout <<"L'année [1970...] ";
		cin >> p_anneeNaissance;


		cin.ignore();//consomme le délimiteur qui est resté

		string p_nomClub;
		char bufferClub[256];

		cout <<"Entrer le nom du club" << endl;
		cin.getline(bufferClub, 256);
		p_nomClub = bufferClub;

/*
		util::Date uneDate(p_jourNaissance, p_moisNaissance, p_anneeNaissance);/* Creation d'un objet Date */

	// Personne* unJoueur = new Joueur(p_nom,p_prenom,uneDate,p_telephone,p_position);

	/*Affichage des Informations de l'objet*/

	//cout <<unJoueur.reqPesonneFormatee()<< endl;

	//Joueur unJoueur(p_nom,p_prenom,uneDate,p_telephone,p_position);

  //Annuaire unAnnuaire(p_nomClub);

  //unAnnuaire.ajouterPersonne(unJoueur);



 // Joueur autreJoueur = unJoueur;

  //autreJoueur.asgTelephone("418 456-6789");

  //unAnnuaire.ajouterPersonne(autreJoueur);


  //cout<<unAnnuaire.reqAnnuaireFormate()<<endl;


   }
   catch (ContratException& e)
   {
      cout << e.reqTexteException() << endl;//traitement de l'erreur de contrat

   }
   return 0;
}
