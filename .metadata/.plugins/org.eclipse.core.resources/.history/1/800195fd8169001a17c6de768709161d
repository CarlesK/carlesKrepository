
/*
 * Personne.cpp
 *
 *  Created on: 2020-02-15
 *      Author: Carles Kouaya
 */

#include "Personne.h"
#include "validationFormat.h"
#include <sstream>
#include <iostream>
using namespace std;

namespace hockey
{
/**
 * \brief constructeur avec paramètres
 * 		  On construit un objet Personne à partir de valeurs passées en paramètres.
 * \param[in] m_nom est une chaine de caractere qui représente le nom de la personne
 * \param[in] m_prenom est une chaine de caractere qui représente le prenom de la personne
 * \param[in] m_dateNaissance est uun objet Date qui représente la date de naissancede la personne
 * \param[in] m_telephone est une chaine de caractere qui représente le numero de telephone de la personne
 */

    Personne::Personne(string p_nom, string p_prenom, util::Date p_dateNaissance,string p_telephone):m_nom (p_nom),m_prenom (p_prenom),m_dateNaissance (p_dateNaissance)
    {
    	PRECONDITION(util::validerFormatNom(p_nom));
        PRECONDITION(util::validerFormatNom(p_prenom));
        POSTCONDITION(p_nom != p_prenom);
    	asgTelephone(m_telephone);
    	INVARIANTS();
    }

    Personne:: Personne(const Personne& p_Personne):m_nom(p_Personne.m_nom),m_prenom(p_Personne.m_prenom),m_dateNaissance(p_Personne.m_dateNaissance)
    {
   	   asgTelephone(p_Personne.m_telephone);
    }


    Personne:: ~Personne()
    {

    }


    /**
     * \brief retourne la date de naissance de la personne
     * \return un objet  Date  qui représente la date de naissance de la personne
     */

	util::Date Personne::reqDateNaissance() const
	{
		return m_dateNaissance;
	}


    /**
     * \brief retourne le nom de la personne
     * \return une chaine de caractere  qui représente le nom de la personne
     */


	const string& Personne::reqNom() const
	{
		return m_nom;
	}

	/**
	 * \brief retourne le prenom de la personne
	 * \return une chaine de caractere  qui représente le prenom de la personne
	 */


	const string& Personne::reqPrenom() const
	{
		return m_prenom;
	}

	/**
     * \brief retourne le telephone de la personne
     * \return une chaine de caractere  qui représente le telephone de la personne
     */


	const string& Personne::reqTelephone() const
	{
		return m_telephone;
	}

	/**
	 * \brief Assigne un telephone  à l'objet courant
	 * \param[in] telephone est une chaine de caractere qui represente le numero de telephone
	 */

	void Personne::asgTelephone(const std::string& p_telephone)
	{   PRECONDITION(util::validerTelephone(p_telephone));
		m_telephone = p_telephone;
		INVARIANTS();
	}

	/*
	* \brief retourne une personne formatée dans une chaîne de caracères (string)*
	 * \return une personne formatée dans une chaîne de caractères
	 */
	string Personne ::reqPesonneFormatee() const
	{
		ostringstream os;
		os << "Nom               : ";
		os << reqNom() << " "<<endl;
		os << "Prenom            : ";
		os << reqPrenom() << " "<<endl;
		os << "Date de naissance : ";
		os << reqDateNaissance().reqDateFormatee ()<< " "<<endl;
		os << "Telephone         : ";
		os << reqTelephone();
		return os.str();
	}

	/**
	 * \brief surcharge de l'opérateur ==
	 * \param[in] p_personne qui est une personne valide
	 * \return un booléen indiquant si les nom prenom et date de naissance de deux personnes  sont égaux ou pas
	 */

	bool Personne:: operator ==(const Personne& p_personne) const
	{
		return (util::conversionMinuscule(m_nom) == util::conversionMinuscule(p_personne.m_nom))
				&& (util::conversionMinuscule(m_prenom) == util::conversionMinuscule(p_personne.m_prenom))
				&& (m_dateNaissance == p_personne.m_dateNaissance);
	}


	void Personne :: verifieInvariant() const
	{
	    INVARIANT(!reqNom().empty());
		INVARIANT(!reqPrenom().empty());

	}



}




