/*
 * validatonFormat.cpp
 *
 *  Created on: 2020-02-15
 *      Author: etudiant
 */


/*
 * validationFormat.cpp
 *
 *  Created on: 2020-02-15
 *      Author: Carles Kouaya
 */

#include <iostream>
#include "validationFormat.h"
#include <string>
#include <regex>

using namespace std;

namespace util{
bool validerTelephone(const std:: string& p_telephone)
{

   bool est_valide = true;

   regex pattern("^\\(?([2-9][^29][0-9])\\)?[-. ]?([2-9][0-9]{2})[-. ]?([0-9]{4})$");

   if (regex_match(p_telephone,pattern))
   {
      est_valide = true;
   }else
   {
	  est_valide = false;
   }

  return est_valide;
}

bool validerNumRAMQ(const std::string& p_numero, const std::string& p_nom, const std::string& p_prenom, int p_jourNaissance, int p_moisNaissance, int p_anneeNaissance, char p_sex)
  {
	   std::string p_nomStr = conversionMinuscule(SupprimerEspaces(p_nom).substr(0,3));
	   std::string p_prenomStr = conversionMinuscule(SupprimerEspaces(p_prenom).substr(0,1));
	   std::string p_numeroStr = SupprimerEspaces(conversionMinuscule(p_numero));


	   bool estValide_Numero = true;

	   regex pattern_numero ("^([[a-zA-Z]{4})[ ]?([0-9][0-9][0-6][0-9])[ ]?([0-3][0-9][0-9][0-9])$");


	  if ( regex_match( p_numero, pattern_numero ) && (p_numeroStr.substr(0,4) == (p_nomStr + p_prenomStr)))

	   {
         estValide_Numero = true;
      }else
      {
	   estValide_Numero = false;
      }

	  int p_deuxDernierChiffres = (p_anneeNaissance % 100);
	  bool estValide_anneeNaissance = true;

	  if ((std::stoi(p_numeroStr.substr(4,2)) == p_deuxDernierChiffres))
	   {
       estValide_anneeNaissance = true;
      }else
      {
	   estValide_anneeNaissance  = false;
      }

	  bool estValide_moisNaissance = true;

	  int ajustement_Mois = (p_sex == 'F' ? 50 : 0);

	  if ( std::stoi(p_numeroStr.substr(6,2)) == (p_moisNaissance + ajustement_Mois) && (p_moisNaissance < MAX_MOIS))
	   {
       estValide_moisNaissance = true;
      }else
      {
	   estValide_moisNaissance  = false;
      }


	  bool estValide_jourNaissance = true;

	  if ((std::stoi(p_numeroStr.substr(8,2)) == p_jourNaissance) && (p_jourNaissance < MAX_JOUR))
	   {
       estValide_jourNaissance = true;
      }else
      {
	   estValide_jourNaissance  = false;
      }

	 return  estValide_Numero && estValide_anneeNaissance && estValide_moisNaissance && estValide_jourNaissance;
}


bool validerFormatNom(const std ::string& p_nom)
{
	bool est_valide = true;

	   regex pattern ("^[a-zA-Z]*$");

	   if (!regex_match(p_nom,pattern))
	   {
	      est_valide = false;
	   }

	  return est_valide;
}


/**
 * \brief retourne la chaine de caractere passée en paramètre en la convertissant en minuscule

 * \param[in] std::string str la chaine de caracteres à traiter

 * \return retourne la chaine de caractere passée en paramètre en la convertissant en minuscule

 */
/*
std::string conversionMinuscule(std::string str)
{
     std::string strMinuscule;
	for (char c: str) {

	    if (c >= 'A' && c <= 'Z')
	    {
	        c = c + 32;
	    }
	    strMinuscule = strMinuscule + c;
	}

	return strMinuscule;
}

*/

std::tring MettreEnMajuscule (string p_texte
{
unsigned int dim = p_texte.size
for ( int i=0; i< dim ;
p_texte [i] = ( toupper p_texte [
return p_texte;

}












/**

 * \brief retourne la chaine de caractere passée en paramètre en supprimant tous les espaces

 * \param[in] std::string str la chaine de caracteres à traiter

 * \return la chaine de caractere passée en paramètre en supprimant tous les espaces

 */


std::string SupprimerEspaces(std::string str)
{
    std::string strSansEspace;

    for (char c: str) {

	  if (c != ' ')
	  {
	   strSansEspace = strSansEspace + c;
	  }

	}

    return strSansEspace;
 }

}











